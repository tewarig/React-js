import { Transaction, TransactionContext } from '@sentry/types';
declare type ReactRouterInstrumentation = <T extends Transaction>(startTransaction: (context: TransactionContext) => T | undefined, startTransactionOnPageLoad?: boolean, startTransactionOnLocationChange?: boolean) => void;
export declare type Route = {
    path?: string;
    childRoutes?: Route[];
};
export declare type Match = (props: {
    location: Location;
    routes: Route[];
}, cb: (error?: Error, _redirectLocation?: Location, renderProps?: {
    routes?: Route[];
}) => void) => void;
declare type Location = {
    pathname: string;
    action?: 'PUSH' | 'REPLACE' | 'POP';
} & Record<string, any>;
declare type History = {
    location?: Location;
    listen?(cb: (location: Location) => void): void;
} & Record<string, any>;
/**
 * Creates routing instrumentation for React Router v3
 * Works for React Router >= 3.2.0 and < 4.0.0
 *
 * @param history object from the `history` library
 * @param routes a list of all routes, should be
 * @param match `Router.match` utility
 */
export declare function reactRouterV3Instrumentation(history: History, routes: Route[], match: Match): ReactRouterInstrumentation;
export {};
//# sourceMappingURL=reactrouter.d.ts.map